Creational.Builder apparently, is supposed to build a a bunch of different parts.

I learned from another instructor that builder only built objects of a certain kind
so I used Coffee as an example.

We could have French coffees, Vietnamese coffees, German coffees.



What I don't understand are these examples:
https://www.geeksforgeeks.org/builder-design-pattern/
where they are implementing the Creational.Builder in these concrete classes.
class IglooHouseBuilder implements HouseBuilder
class TipiHouseBuilder implements HouseBuilder

then they thrown in

class CivilEngineer
{

    private HouseBuilder houseBuilder;

    public CivilEngineer(HouseBuilder houseBuilder)
    {
        this.houseBuilder = houseBuilder;
    }

    public House getHouse()
    {
        return this.houseBuilder.getHouse();
    }

    public void constructHouse()
    {
        this.houseBuilder.buildBasement();
        this.houseBuilder.buildStructure();
        this.houseBuilder.bulidRoof();
        this.houseBuilder.buildInterior();
    }


and suddenly we're IMHO totally breaking the pattern.
Civil Engineer implements Creational.Factory pattern it looks like to me...

and then theres yet another class:

class Creational.Builder
{
    public static void main(String[] args)
    {
        HouseBuilder iglooBuilder = new IglooHouseBuilder();
        CivilEngineer engineer = new CivilEngineer(iglooBuilder);

        engineer.constructHouse();

        House house = engineer.getHouse();

        System.out.println("Creational.Builder constructed: "+ house);
    }
}


I believe this goes WAY beyond a Creational.Builder .... way way way
It's like Creational.Factory Creational.Builder. I just don't understand why there are so many classes and interfaces here.
Does that really show the BUILDER pattern alone?
